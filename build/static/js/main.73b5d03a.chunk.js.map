{"version":3,"sources":["storehash.js","App.js","ipfs.js","registerServiceWorker.js","index.js","web3.js"],"names":["_web3__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","__webpack_exports__","web3","eth","Contract","constant","inputs","name","outputs","type","payable","stateMutability","App","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","_this","convertToBuffer","_callee","_Users_djoker_Documents_Programs_work_programs_eth_ipffs_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","Buffer","from","result","sent","setState","stop","this","onClick","_callee2","_context2","getTransactionReceipt","err","console","log","t0","onSubmit","_callee3","accounts","_context3","getAccounts","storehash","options","address","ipfs","add","hash","methods","sendHash","send","error","react__WEBPACK_IMPORTED_MODULE_11___default","createElement","className","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","onChange","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","bsStyle","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","bordered","responsive","href","Component","require","host","port","protocol","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","react_default","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","web3__WEBPACK_IMPORTED_MODULE_0__","n","Web3","currentProvider"],"mappings":"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","file":"static/js/main.73b5d03a.chunk.js","sourcesContent":["import web3 from './web3';\n\nconst address = '0xAB1D5833d72791193bB6Ea4D12870EDd807B5ca8';\n\nconst abi = [\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"getHash\",\n    \"outputs\": [\n      {\n        \"name\": \"x\",\n        \"type\": \"string\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"x\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"sendHash\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n]\nexport default new web3.eth.Contract(abi, address);","import {Table, Grid, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component {\n \n    state = {\n      ipfsHash:null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: ''   \n    };\n   \n    captureFile =(event) => {\n        event.stopPropagation()\n        event.preventDefault()\n        const file = event.target.files[0]\n        let reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => this.convertToBuffer(reader)    \n      };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    onClick = async () => {\n\n    try{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting...\"});\n        // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        }); //await for getTransactionReceipt\n\n        await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n        await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n      } //try\n    catch(error){\n        console.log(error);\n      } //catch\n  } //onClick\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n\n      //bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n     \n      console.log('Sending from Metamask account: ' + accounts[0]);\n\n      //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      this.setState({ethAddress});\n\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash \n        this.setState({ ipfsHash:ipfsHash[0].hash });\n\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n        \n        storehash.methods.sendHash(this.state.ipfsHash).send({\n          from: accounts[0] \n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({transactionHash});\n        }); //storehash \n      }) //await ipfs.add \n    }; //onSubmit \n  \n    render() {\n      \n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>  Demo for Ethereum and InterPlanetary File System(IPFS)</h1>\n          </header>\n          \n          <hr />\n\n        <Grid>\n          <h3> Choose file to send to IPFS </h3>\n          <Form onSubmit={this.onSubmit}>\n            <input \n              type = \"file\"\n              onChange = {this.captureFile}\n            />\n             <Button \n             bsStyle=\"primary\" \n             type=\"submit\"> \n             Send file\n             </Button>\n          </Form>\n\n          <hr/>\n            <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n\n              <Table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n               \n                <tbody>\n                  <tr>\n                    <td>IPFS Hash Value stored on Eth Blockchain</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Tx Hash</td>\n                    <td><a href={\"https://rinkeby.etherscan.io/tx/\"+ this.state.transactionHash}>{this.state.transactionHash}</a></td>\n                  </tr>\n\n                  <tr>\n                    <td>Block Number</td>\n                    <td>{this.state.blockNumber}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Gas Used for transaction</td>\n                    <td>{this.state.gasUsed}</td>\n                  </tr>                \n                </tbody>\n            </Table>\n        </Grid>\n     </div>\n      );\n    }\n}\n\nexport default App;\n","\nconst IPFS = require('ipfs-api');\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\n//run with local daemon\n// const ipfsApi = require('ipfs-api');\n// const ipfs = new ipfsApi('localhost', '5001', {protocol: 'http'});\n\nexport default ipfs; \n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","import Web3 from 'web3';\n//overrides metamask v0.2 for our v 1.0\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;"],"sourceRoot":""}